datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Language {
  en
  uz
  ru
}

enum OrderStatus {
  pending
  process
  canceled
  completed
}

model User {
  id          String    @id @default(uuid())
  chatId      BigInt    @unique
  firstName   String
  lastName    String?
  username    String?
  phoneNumber String?
  location    Json?     @default("[]")
  language    Language?
  active      Boolean   @default(false)
  isAdmin     Boolean   @default(false)
  orders      Order[]
  bookings    Booking[]
  cart        Cart?

  @@map("users")
}

model Booking {
  id             String   @id @default(uuid())
  customerId     String
  startTime      DateTime
  endTime        DateTime
  numberOfPeople Int
  customerName   String
  contactNumber  String
  customer       User     @relation(fields: [customerId], references: [id])

  @@map("booking")
}

model Category {
  id      String                @id @default(uuid())
  foods   Food[]
  images  Image[]
  i18n    CategoryTranslation[]
  deleted Boolean               @default(false)

  @@map("categories")
}

model Food {
  id         String            @id @default(uuid())
  price      Float
  language   Language?
  categoryId String
  category   Category          @relation(fields: [categoryId], references: [id])
  images     Image[]
  orderItems OrderItem[]
  cartItems  CartItem[]
  i18n       FoodTranslation[]
  deleted    Boolean           @default(false)

  @@map("foods")
}

model Image {
  id         String    @id @default(uuid())
  url        String
  categoryId String?
  foodId     String?
  category   Category? @relation(fields: [categoryId], references: [id])
  food       Food?     @relation(fields: [foodId], references: [id])

  @@map("images")
}

model Order {
  id            String      @id @default(uuid())
  orderNumber   Int         @default(autoincrement())
  userId        String
  paymentMethod String
  location      Json
  deliveryCost  Float       @default(5000)
  totalAmount   Float
  status        OrderStatus @default(pending)
  user          User        @relation(fields: [userId], references: [id])
  orderItems    OrderItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt

  @@map("orders")
}

model OrderItem {
  id       String @id @default(uuid())
  orderId  String
  foodId   String
  quantity Int
  price    Float
  total    Float
  order    Order  @relation(fields: [orderId], references: [id])
  food     Food   @relation(fields: [foodId], references: [id])

  @@map("order_item")
}

model Cart {
  id     String     @id @default(uuid())
  userId String     @unique
  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[]

  @@map("carts")
}

model CartItem {
  id       String @id @default(uuid())
  cartId   String
  foodId   String
  quantity Int
  cart     Cart   @relation(fields: [cartId], references: [id])
  food     Food   @relation(fields: [foodId], references: [id])

  @@unique([cartId, foodId])
  @@map("cart_items")
}

model CategoryTranslation {
  id         String    @id @default(uuid())
  title      String
  language   Language?
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id])

  @@map("category_i18n")
}

model FoodTranslation {
  id          String    @id @default(uuid())
  title       String
  composition String
  language    Language?
  foodId      String
  food        Food      @relation(fields: [foodId], references: [id])

  @@map("food_i18n")
}
